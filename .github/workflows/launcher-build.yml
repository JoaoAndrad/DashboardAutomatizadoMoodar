name: Build launcher and publish release
permissions:
  contents: write

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Prepare dist dir
        run: mkdir -p dist/${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building for $GOOS/$GOARCH"
          # Build from inside the launcher module so `go.mod` is found
          pushd launcher
          echo "Ensuring Go modules are downloaded (creates go.sum if needed)"
          go mod tidy
          go mod download
          # Decide target binary name so long lines don't get wrapped by runners
          if [ "$GOOS" = "windows" ]; then
            TARGET_NAME="moodar-launcher.exe"
          else
            TARGET_NAME="moodar-launcher"
          fi
          GOOS=${GOOS} GOARCH=${GOARCH} go build -ldflags "-s -w" -o ../dist/${GOOS}-${GOARCH}/${TARGET_NAME} .
          popd

      - name: Package artifact
        run: |
          pushd dist/${{ matrix.goos }}-${{ matrix.goarch }}
          # If an icon exists in the launcher folder, copy it into the dist dir so it ends up in the zip
          if [ -f ../../launcher/icon.ico ]; then
            cp ../../launcher/icon.ico . || true
          fi
          # Use the built target filename (avoid long wrapped commands)
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BIN_NAME="moodar-launcher.exe"
          else
            BIN_NAME="moodar-launcher"
          fi
          # Create zip and sha256
          if [ -f icon.ico ]; then
            zip -r moodar-launcher-${{ matrix.goos }}-${{ matrix.goarch }}.zip "${BIN_NAME}" icon.ico || zip -r moodar-launcher-${{ matrix.goos }}-${{ matrix.goarch }}.zip "${BIN_NAME}"
          else
            zip -r moodar-launcher-${{ matrix.goos }}-${{ matrix.goarch }}.zip "${BIN_NAME}"
          fi
          sha256sum moodar-launcher-${{ matrix.goos }}-${{ matrix.goarch }}.zip > moodar-launcher-${{ matrix.goos }}-${{ matrix.goarch }}.zip.sha256
          popd

      - name: Upload build artifact (per-matrix)
        uses: actions/upload-artifact@v4
        with:
          name: moodar-launcher-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/${{ matrix.goos }}-${{ matrix.goarch }}/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug: list downloaded artifacts
        run: |
          echo "Listing artifacts folder contents for debug"
          ls -la artifacts || true
          find artifacts -maxdepth 3 -type f -print || true

      - name: Create project zip
        env:
          TAG: ${{ github.ref_name }}
        run: |
          # create a project zip excluding venv, caches and large caches
          zip -r project-${TAG}.zip . -x .git/** -x .venv/** -x venv/** -x tmp* -x companies_cache_*.json -x "**/__pycache__/**" -x "**/*.pyc"
          sha256sum project-${TAG}.zip > project-${TAG}.zip.sha256

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.zip
            artifacts/**/*.zip.sha256
            project-${{ github.ref_name }}.zip
            project-${{ github.ref_name }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
